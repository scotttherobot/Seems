Some documentation about the API.
This is a living document.

### VERSIONING ###
The API is currently version 0.1
This means that you need to remember to include this in the route.
ie. /0.1/teacher/studeants/ is valid
    /teacher/students/ is not.

### KEY ROUTES ###
Authentication.

/login - POST
parameters: username, password
response: {status:"success", key:"asdf23234asdfasd"}
Note: The key in the response is the token which you will use to auth
   with from now on by setting the 'HTTP_CARDS_KEY' http header.

/register - POST
Don't use this yet. Users ought to register on the computer for now.

/logout - POST
Will eventually delete a user's session. Currently doesn't do a thing.
BUT it would be good to implement.

### TEACHER ROUTES ###
Teacher routes are separate from student routes, to avoid
confusion, and since there is very little overlap of
functionality.

/teacher/ - GET
Returns JSON object with metadata about a teacher, including user information
and sections.

/teacher/students/ - GET
Returns JSON object containing an array of the teacher's sections, each
holding an array of students that are enrolled in said section.

/teacher/tests/ - GET
Returns an array of information about each test that a teacher owns.

/teacher/tests/ - POST
Creates a new test
Parameters: testName, attempts
testName- the name of the test
attempts- the default number of attempts [optional].
Return: {status:"success",userid:"[your user id]",
         name:"[name of test]",attempts:"[attempts]",
         id:"[id of test]"}

/teacher/tests/:id/ - GET
Returns a test object, including metadata, questions, choices, as well
as assignments of that test to students.
Note: Also includes whether a question is correct or not. If there is
a test editor built in the app, this is helpful for highlighting which
choices are marked as correct. 

/teacher/tests/:id/q/ - POST
Parameters: testId, prompt
testId - the ID of the test to add the question to
prompt - the question prompt string.
Adds a question to a test. You must be a teacher to do this.
Return: {status:"success",userid:"[your userid]",
         prompt:"Why is the sky blue?", testId:"[the test id]",
         id:"[question id]"}

/teacher/tests/:id/c/ - POST
Parameters: prompt, questionId, correct
prompt - the coice prompt
questionId - the question that the choice belongs to
correct - is this a correct choice? Binary value, please.
NOTE: There can be more than one correct choice for a question.
Return: {status:"success",userid:"[your userid]",
         prompt:"Reasons.",questionId:"[the question id]",
         id:"[new choice id]"}

/teacher/tests/assign/ - POST
Parameters: studentid, attempts, testId
studentid - the student id to assign this test to
attempts - the number of attempts to allow the student
testId - the id of the test
Return: {status:"success",userid:"[your user id]",
         studentName:"[The student's full name",
         attempts:"[the number of attempts allowed]",
         id:"[the id of the assignment]"}
NOTE: This can also return an object with {status:"fail"..}
      when a failure or special case has happened. Such an object
      will look like:
      {status:"fail",message:"The student has already been assigned
      this test."}


